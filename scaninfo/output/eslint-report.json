[
  {
    "filePath": "/mnt/c/Users/Matt/Desktop/guardian - from scratch/unisa-guardian-store/server.ts",
    "messages": [
      {
        "ruleId": "require-rate-limit",
        "severity": 2,
        "message": "Possible dangerous authentication endpoint '/rest/2fa/status'. Missing a rate limiter for the endpoint.",
        "line": 406,
        "column": 3,
        "nodeType": "CallExpression",
        "endLine": 409,
        "endColumn": 4
      },
      {
        "ruleId": "require-rate-limit",
        "severity": 2,
        "message": "Possible dangerous authentication endpoint '/rest/user/authentication-details'. Missing a rate limiter for the endpoint.",
        "line": 552,
        "column": 3,
        "nodeType": "CallExpression",
        "endLine": 552,
        "endColumn": 69
      },
      {
        "ruleId": "require-rate-limit",
        "severity": 2,
        "message": "Possible dangerous authentication endpoint '/rest/user/data-export'. Missing a rate limiter for the endpoint.",
        "line": 572,
        "column": 3,
        "nodeType": "CallExpression",
        "endLine": 572,
        "endColumn": 92
      },
      {
        "ruleId": "require-rate-limit",
        "severity": 2,
        "message": "Possible dangerous authentication endpoint '/rest/user/data-export'. Missing a rate limiter for the endpoint.",
        "line": 573,
        "column": 3,
        "nodeType": "CallExpression",
        "endLine": 573,
        "endColumn": 76
      }
    ],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/*\r\n * Copyright (c) 2014-2022 Bjoern Kimminich & the OWASP Juice Shop contributors.\r\n * SPDX-License-Identifier: MIT\r\n */\r\nimport dataErasure from './routes/dataErasure'\r\nimport fs = require('fs')\r\nimport { Request, Response, NextFunction } from 'express'\r\nimport { sequelize } from './models'\r\nimport { UserModel } from './models/user'\r\nimport { QuantityModel } from './models/quantity'\r\nimport { CardModel } from './models/card'\r\nimport { PrivacyRequestModel } from './models/privacyRequests'\r\nimport { AddressModel } from './models/address'\r\nimport { SecurityAnswerModel } from './models/securityAnswer'\r\nimport { SecurityQuestionModel } from './models/securityQuestion'\r\nimport { RecycleModel } from './models/recycle'\r\nimport { ComplaintModel } from './models/complaint'\r\nimport { ChallengeModel } from './models/challenge'\r\nimport { BasketItemModel } from './models/basketitem'\r\nimport { FeedbackModel } from './models/feedback'\r\nimport { ProductModel } from './models/product'\r\nimport { WalletModel } from './models/wallet'\r\nconst startTime = Date.now()\r\nconst path = require('path')\r\nconst morgan = require('morgan')\r\nconst colors = require('colors/safe')\r\nconst finale = require('finale-rest')\r\nconst express = require('express')\r\nconst compression = require('compression')\r\nconst helmet = require('helmet')\r\nconst featurePolicy = require('feature-policy')\r\nconst errorhandler = require('errorhandler')\r\nconst cookieParser = require('cookie-parser')\r\nconst serveIndex = require('serve-index')\r\nconst bodyParser = require('body-parser')\r\nconst cors = require('cors')\r\nconst securityTxt = require('express-security.txt')\r\nconst robots = require('express-robots-txt')\r\nconst yaml = require('js-yaml')\r\nconst swaggerUi = require('swagger-ui-express')\r\nconst RateLimit = require('express-rate-limit')\r\nconst client = require('prom-client')\r\nconst ipfilter = require('express-ipfilter').IpFilter\r\nconst swaggerDocument = yaml.load(fs.readFileSync('./swagger.yml', 'utf8'))\r\nconst {\r\n  ensureFileIsPassed,\r\n  handleZipFileUpload,\r\n  checkUploadSize,\r\n  checkFileType,\r\n  handleXmlUpload\r\n} = require('./routes/fileUpload')\r\nconst profileImageFileUpload = require('./routes/profileImageFileUpload')\r\nconst profileImageUrlUpload = require('./routes/profileImageUrlUpload')\r\nconst redirect = require('./routes/redirect')\r\nconst vulnCodeSnippet = require('./routes/vulnCodeSnippet')\r\nconst vulnCodeFixes = require('./routes/vulnCodeFixes')\r\nconst angular = require('./routes/angular')\r\nconst easterEgg = require('./routes/easterEgg')\r\nconst premiumReward = require('./routes/premiumReward')\r\nconst privacyPolicyProof = require('./routes/privacyPolicyProof')\r\nconst appVersion = require('./routes/appVersion')\r\nconst repeatNotification = require('./routes/repeatNotification')\r\nconst continueCode = require('./routes/continueCode')\r\nconst restoreProgress = require('./routes/restoreProgress')\r\nconst fileServer = require('./routes/fileServer')\r\nconst quarantineServer = require('./routes/quarantineServer')\r\nconst keyServer = require('./routes/keyServer')\r\nconst logFileServer = require('./routes/logfileServer')\r\nconst metrics = require('./routes/metrics')\r\nconst authenticatedUsers = require('./routes/authenticatedUsers')\r\nconst currentUser = require('./routes/currentUser')\r\nconst login = require('./routes/login')\r\nconst changePassword = require('./routes/changePassword')\r\nconst resetPassword = require('./routes/resetPassword')\r\nconst securityQuestion = require('./routes/securityQuestion')\r\nconst search = require('./routes/search')\r\nconst coupon = require('./routes/coupon')\r\nconst basket = require('./routes/basket')\r\nconst order = require('./routes/order')\r\nconst verify = require('./routes/verify')\r\nconst recycles = require('./routes/recycles')\r\nconst b2bOrder = require('./routes/b2bOrder')\r\nconst showProductReviews = require('./routes/showProductReviews')\r\nconst createProductReviews = require('./routes/createProductReviews')\r\nconst updateProductReviews = require('./routes/updateProductReviews')\r\nconst likeProductReviews = require('./routes/likeProductReviews')\r\nconst logger = require('./lib/logger')\r\nconst utils = require('./lib/utils')\r\nconst security = require('./lib/insecurity')\r\nconst datacreator = require('./data/datacreator')\r\nconst app = express()\r\nconst server = require('http').Server(app)\r\nconst appConfiguration = require('./routes/appConfiguration')\r\nconst captcha = require('./routes/captcha')\r\nconst trackOrder = require('./routes/trackOrder')\r\nconst countryMapping = require('./routes/countryMapping')\r\nconst basketItems = require('./routes/basketItems')\r\nconst saveLoginIp = require('./routes/saveLoginIp')\r\nconst userProfile = require('./routes/userProfile')\r\nconst updateUserProfile = require('./routes/updateUserProfile')\r\nconst videoHandler = require('./routes/videoHandler')\r\nconst twoFactorAuth = require('./routes/2fa')\r\nconst languageList = require('./routes/languages')\r\nconst config = require('config')\r\nconst imageCaptcha = require('./routes/imageCaptcha')\r\nconst dataExport = require('./routes/dataExport')\r\nconst address = require('./routes/address')\r\nconst payment = require('./routes/payment')\r\nconst wallet = require('./routes/wallet')\r\nconst orderHistory = require('./routes/orderHistory')\r\nconst delivery = require('./routes/delivery')\r\nconst deluxe = require('./routes/deluxe')\r\nconst memory = require('./routes/memory')\r\nconst chatbot = require('./routes/chatbot')\r\nconst locales = require('./data/static/locales.json')\r\nconst i18n = require('i18n')\r\n\r\nconst appName = config.get('application.customMetricsPrefix')\r\nconst startupGauge = new client.Gauge({\r\n  name: `${appName}_startup_duration_seconds`,\r\n  help: `Duration ${appName} required to perform a certain task during startup`,\r\n  labelNames: ['task']\r\n})\r\n\r\n// Wraps the function and measures its (async) execution time\r\nconst collectDurationPromise = (name: string, func: Function) => {\r\n  return async (...args: any) => {\r\n    const end = startupGauge.startTimer({ task: name })\r\n    const res = await func(...args)\r\n    end()\r\n    return res\r\n  }\r\n}\r\nvoid collectDurationPromise('validatePreconditions', require('./lib/startup/validatePreconditions'))()\r\nvoid collectDurationPromise('cleanupFtpFolder', require('./lib/startup/cleanupFtpFolder'))()\r\nvoid collectDurationPromise('validateConfig', require('./lib/startup/validateConfig'))()\r\n\r\n// Reloads the i18n files in case of server restarts or starts.\r\nasync function restoreOverwrittenFilesWithOriginals () {\r\n  await collectDurationPromise('restoreOverwrittenFilesWithOriginals', require('./lib/startup/restoreOverwrittenFilesWithOriginals'))()\r\n}\r\n\r\n/* Sets view engine to hbs */\r\napp.set('view engine', 'hbs')\r\n\r\n// Function called first to ensure that all the i18n files are reloaded successfully before other linked operations.\r\nrestoreOverwrittenFilesWithOriginals().then(() => {\r\n  /* Locals */\r\n  app.locals.captchaId = 0\r\n  app.locals.captchaReqId = 1\r\n  app.locals.captchaBypassReqTimes = []\r\n  app.locals.abused_ssti_bug = false\r\n  app.locals.abused_ssrf_bug = false\r\n\r\n  /* Compression for all requests */\r\n  app.use(compression())\r\n\r\n  /* Bludgeon solution for possible CORS problems: Allow everything! */\r\n  app.options('*', cors())\r\n  app.use(cors())\r\n\r\n  /* Security middleware */\r\n  app.use(helmet.noSniff())\r\n  app.use(helmet.frameguard())\r\n  // app.use(helmet.xssFilter()); // = no protection from persisted XSS via RESTful API\r\n  app.disable('x-powered-by')\r\n  app.use(featurePolicy({\r\n    features: {\r\n      payment: [\"'self'\"]\r\n    }\r\n  }))\r\n\r\n  /* Hiring header */\r\n  app.use((req: Request, res: Response, next: NextFunction) => {\r\n    res.append('X-Recruiting', config.get('application.securityTxt.hiring'))\r\n    next()\r\n  })\r\n\r\n  /* Remove duplicate slashes from URL which allowed bypassing subsequent filters */\r\n  app.use((req: Request, res: Response, next: NextFunction) => {\r\n    req.url = req.url.replace(/[/]+/g, '/')\r\n    next()\r\n  })\r\n\r\n  /* Increase request counter metric for every request */\r\n  app.use(metrics.observeRequestMetricsMiddleware())\r\n\r\n  /* Security Policy */\r\n  const securityTxtExpiration = new Date()\r\n  securityTxtExpiration.setFullYear(securityTxtExpiration.getFullYear() + 1)\r\n  app.get(['/.well-known/security.txt', '/security.txt'], verify.accessControlChallenges())\r\n  app.use(['/.well-known/security.txt', '/security.txt'], securityTxt({\r\n    contact: config.get('application.securityTxt.contact'),\r\n    encryption: config.get('application.securityTxt.encryption'),\r\n    acknowledgements: config.get('application.securityTxt.acknowledgements'),\r\n    'Preferred-Languages': [...new Set(locales.map((locale: { key: string }) => locale.key.substr(0, 2)))].join(', '),\r\n    hiring: config.get('application.securityTxt.hiring'),\r\n    expires: securityTxtExpiration.toUTCString()\r\n  }))\r\n\r\n  /* robots.txt */\r\n  app.use(robots({ UserAgent: '*', Disallow: '/ftp' }))\r\n\r\n  /* Checks for challenges solved by retrieving a file implicitly or explicitly */\r\n  app.use('/assets/public/images/padding', verify.accessControlChallenges())\r\n  app.use('/assets/public/images/products', verify.accessControlChallenges())\r\n  app.use('/assets/public/images/uploads', verify.accessControlChallenges())\r\n  app.use('/assets/i18n', verify.accessControlChallenges())\r\n\r\n  /* Checks for challenges solved by abusing SSTi and SSRF bugs */\r\n  app.use('/solve/challenges/server-side', verify.serverSideChallenges())\r\n\r\n  /* Create middleware to change paths from the serve-index plugin from absolute to relative */\r\n  const serveIndexMiddleware = (req: Request, res: Response, next: NextFunction) => {\r\n    const origEnd = res.end\r\n    // @ts-expect-error\r\n    res.end = function () {\r\n      if (arguments.length) {\r\n        const reqPath = req.originalUrl.replace(/\\?.*$/, '')\r\n        const currentFolder = reqPath.split('/').pop()\r\n        arguments[0] = arguments[0].replace(/a href=\"([^\"]+?)\"/gi, function (matchString: string, matchedUrl: string) {\r\n          let relativePath = path.relative(reqPath, matchedUrl)\r\n          if (relativePath === '') {\r\n            relativePath = currentFolder\r\n          } else if (!relativePath.startsWith('.') && currentFolder !== '') {\r\n            relativePath = currentFolder + '/' + relativePath\r\n          } else {\r\n            relativePath = relativePath.replace('..', '.')\r\n          }\r\n          return 'a href=\"' + relativePath + '\"'\r\n        })\r\n      }\r\n      // @ts-expect-error\r\n      origEnd.apply(this, arguments)\r\n    }\r\n    next()\r\n  }\r\n\r\n  // vuln-code-snippet start directoryListingChallenge accessLogDisclosureChallenge\r\n  /* /ftp directory browsing and file download */ // vuln-code-snippet neutral-line directoryListingChallenge\r\n  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true })) // vuln-code-snippet vuln-line directoryListingChallenge\r\n  app.use('/ftp(?!/quarantine)/:file', fileServer()) // vuln-code-snippet vuln-line directoryListingChallenge\r\n  app.use('/ftp/quarantine/:file', quarantineServer()) // vuln-code-snippet neutral-line directoryListingChallenge\r\n\r\n  /* /encryptionkeys directory browsing */\r\n  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))\r\n  app.use('/encryptionkeys/:file', keyServer())\r\n\r\n  /* /logs directory browsing */ // vuln-code-snippet neutral-line accessLogDisclosureChallenge\r\n  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' })) // vuln-code-snippet vuln-line accessLogDisclosureChallenge\r\n  app.use('/support/logs', verify.accessControlChallenges()) // vuln-code-snippet hide-line\r\n  app.use('/support/logs/:file', logFileServer()) // vuln-code-snippet vuln-line accessLogDisclosureChallenge\r\n\r\n  /* Swagger documentation for B2B v2 endpoints */\r\n  app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument))\r\n\r\n  app.use(express.static(path.resolve('frontend/dist/frontend')))\r\n  app.use(cookieParser('kekse'))\r\n  // vuln-code-snippet end directoryListingChallenge accessLogDisclosureChallenge\r\n\r\n  /* Configure and enable backend-side i18n */\r\n  i18n.configure({\r\n    locales: locales.map((locale: { key: string }) => locale.key),\r\n    directory: path.resolve('i18n'),\r\n    cookie: 'language',\r\n    defaultLocale: 'en',\r\n    autoReload: true\r\n  })\r\n  app.use(i18n.init)\r\n\r\n  app.use(bodyParser.urlencoded({ extended: true }))\r\n  /* File Upload */\r\n  app.post('/file-upload', uploadToMemory.single('file'), ensureFileIsPassed, metrics.observeFileUploadMetricsMiddleware(), handleZipFileUpload, checkUploadSize, checkFileType, handleXmlUpload)\r\n  app.post('/profile/image/file', uploadToMemory.single('file'), ensureFileIsPassed, metrics.observeFileUploadMetricsMiddleware(), profileImageFileUpload())\r\n  app.post('/profile/image/url', uploadToMemory.single('file'), profileImageUrlUpload())\r\n  app.post('/rest/memories', uploadToDisk.single('image'), ensureFileIsPassed, security.appendUserId(), metrics.observeFileUploadMetricsMiddleware(), memory.addMemory())\r\n\r\n  app.use(bodyParser.text({ type: '*/*' }))\r\n  app.use(function jsonParser (req: Request, res: Response, next: NextFunction) {\r\n    // @ts-expect-error\r\n    req.rawBody = req.body\r\n    if (req.headers['content-type']?.includes('application/json')) {\r\n      if (!req.body) {\r\n        req.body = {}\r\n      }\r\n      if (req.body !== Object(req.body)) { // Expensive workaround for 500 errors during Frisby test run (see #640)\r\n        req.body = JSON.parse(req.body)\r\n      }\r\n    }\r\n    next()\r\n  })\r\n\r\n  /* HTTP request logging */\r\n  const accessLogStream = require('file-stream-rotator').getStream({\r\n    filename: path.resolve('logs/access.log'),\r\n    frequency: 'daily',\r\n    verbose: false,\r\n    max_logs: '2d'\r\n  })\r\n  app.use(morgan('combined', { stream: accessLogStream }))\r\n\r\n  // vuln-code-snippet start resetPasswordMortyChallenge\r\n  /* Rate limiting */\r\n  app.enable('trust proxy')\r\n  app.use('/rest/user/reset-password', new RateLimit({\r\n    windowMs: 5 * 60 * 1000,\r\n    max: 100,\r\n    keyGenerator ({ headers, ip }: { headers: any, ip: any }) { return headers['X-Forwarded-For'] || ip } // vuln-code-snippet vuln-line resetPasswordMortyChallenge\r\n  }))\r\n  // vuln-code-snippet end resetPasswordMortyChallenge\r\n\r\n  // vuln-code-snippet start changeProductChallenge\r\n  /** Authorization **/\r\n  /* Checks on JWT in Authorization header */ // vuln-code-snippet hide-line\r\n  app.use(verify.jwtChallenges()) // vuln-code-snippet hide-line\r\n  /* Baskets: Unauthorized users are not allowed to access baskets */\r\n  app.use('/rest/basket', security.isAuthorized(), security.appendUserId())\r\n  /* BasketItems: API only accessible for authenticated users */\r\n  app.use('/api/BasketItems', security.isAuthorized())\r\n  app.use('/api/BasketItems/:id', security.isAuthorized())\r\n  /* Feedbacks: GET allowed for feedback carousel, POST allowed in order to provide feedback without being logged in */\r\n  app.use('/api/Feedbacks/:id', security.isAuthorized())\r\n  /* Users: Only POST is allowed in order to register a new user */\r\n  app.get('/api/Users', security.isAuthorized())\r\n  app.route('/api/Users/:id')\r\n    .get(security.isAuthorized())\r\n    .put(security.denyAll())\r\n    .delete(security.denyAll())\r\n  /* Products: Only GET is allowed in order to view products */ // vuln-code-snippet neutral-line changeProductChallenge\r\n  app.post('/api/Products', security.isAuthorized()) // vuln-code-snippet neutral-line changeProductChallenge\r\n  // app.put('/api/Products/:id', security.isAuthorized()) // vuln-code-snippet vuln-line changeProductChallenge\r\n  app.delete('/api/Products/:id', security.denyAll())\r\n  /* Challenges: GET list of challenges allowed. Everything else forbidden entirely */\r\n  app.post('/api/Challenges', security.denyAll())\r\n  app.use('/api/Challenges/:id', security.denyAll())\r\n  /* Complaints: POST and GET allowed when logged in only */\r\n  app.get('/api/Complaints', security.isAuthorized())\r\n  app.post('/api/Complaints', security.isAuthorized())\r\n  app.use('/api/Complaints/:id', security.denyAll())\r\n  /* Recycles: POST and GET allowed when logged in only */\r\n  app.get('/api/Recycles', recycles.blockRecycleItems())\r\n  app.post('/api/Recycles', security.isAuthorized())\r\n  /* Challenge evaluation before finale takes over */\r\n  app.get('/api/Recycles/:id', recycles.getRecycleItem())\r\n  app.put('/api/Recycles/:id', security.denyAll())\r\n  app.delete('/api/Recycles/:id', security.denyAll())\r\n  /* SecurityQuestions: Only GET list of questions allowed. */\r\n  app.post('/api/SecurityQuestions', security.denyAll())\r\n  app.use('/api/SecurityQuestions/:id', security.denyAll())\r\n  /* SecurityAnswers: Only POST of answer allowed. */\r\n  app.get('/api/SecurityAnswers', security.denyAll())\r\n  app.use('/api/SecurityAnswers/:id', security.denyAll())\r\n  /* REST API */\r\n  app.use('/rest/user/authentication-details', security.isAuthorized())\r\n  app.use('/rest/basket/:id', security.isAuthorized())\r\n  app.use('/rest/basket/:id/order', security.isAuthorized())\r\n  /* Challenge evaluation before finale takes over */ // vuln-code-snippet hide-start\r\n  app.post('/api/Feedbacks', verify.forgedFeedbackChallenge())\r\n  /* Captcha verification before finale takes over */\r\n  app.post('/api/Feedbacks', captcha.verifyCaptcha())\r\n  /* Captcha Bypass challenge verification */\r\n  app.post('/api/Feedbacks', verify.captchaBypassChallenge())\r\n  /* User registration challenge verifications before finale takes over */\r\n  app.post('/api/Users', verify.registerAdminChallenge())\r\n  app.post('/api/Users', verify.passwordRepeatChallenge()) // vuln-code-snippet hide-end\r\n  /* Unauthorized users are not allowed to access B2B API */\r\n  app.use('/b2b/v2', security.isAuthorized())\r\n  /* Check if the quantity is available in stock and limit per user not exceeded, then add item to basket */\r\n  app.put('/api/BasketItems/:id', security.appendUserId(), basketItems.quantityCheckBeforeBasketItemUpdate())\r\n  app.post('/api/BasketItems', security.appendUserId(), basketItems.quantityCheckBeforeBasketItemAddition(), basketItems.addBasketItem())\r\n  /* Accounting users are allowed to check and update quantities */\r\n  app.delete('/api/Quantitys/:id', security.denyAll())\r\n  app.post('/api/Quantitys', security.denyAll())\r\n  app.use('/api/Quantitys/:id', security.isAccounting(), ipfilter(['123.456.789'], { mode: 'allow' }))\r\n  /* Feedbacks: Do not allow changes of existing feedback */\r\n  app.put('/api/Feedbacks/:id', security.denyAll())\r\n  /* PrivacyRequests: Only allowed for authenticated users */\r\n  app.use('/api/PrivacyRequests', security.isAuthorized())\r\n  app.use('/api/PrivacyRequests/:id', security.isAuthorized())\r\n  /* PaymentMethodRequests: Only allowed for authenticated users */\r\n  app.post('/api/Cards', security.appendUserId())\r\n  app.get('/api/Cards', security.appendUserId(), payment.getPaymentMethods())\r\n  app.put('/api/Cards/:id', security.denyAll())\r\n  app.delete('/api/Cards/:id', security.appendUserId(), payment.delPaymentMethodById())\r\n  app.get('/api/Cards/:id', security.appendUserId(), payment.getPaymentMethodById())\r\n  /* PrivacyRequests: Only POST allowed for authenticated users */\r\n  app.post('/api/PrivacyRequests', security.isAuthorized())\r\n  app.get('/api/PrivacyRequests', security.denyAll())\r\n  app.use('/api/PrivacyRequests/:id', security.denyAll())\r\n\r\n  app.post('/api/Addresss', security.appendUserId())\r\n  app.get('/api/Addresss', security.appendUserId(), address.getAddress())\r\n  app.put('/api/Addresss/:id', security.appendUserId())\r\n  app.delete('/api/Addresss/:id', security.appendUserId(), address.delAddressById())\r\n  app.get('/api/Addresss/:id', security.appendUserId(), address.getAddressById())\r\n  app.get('/api/Deliverys', delivery.getDeliveryMethods())\r\n  app.get('/api/Deliverys/:id', delivery.getDeliveryMethod())\r\n  // vuln-code-snippet end changeProductChallenge\r\n\r\n  /* Verify the 2FA Token */\r\n  app.post('/rest/2fa/verify',\r\n    new RateLimit({ windowMs: 5 * 60 * 1000, max: 100 }),\r\n    twoFactorAuth.verify()\r\n  )\r\n  /* Check 2FA Status for the current User */\r\n  app.get('/rest/2fa/status', security.isAuthorized(),\r\n    new RateLimit({ windowMs: 5 * 60 * 1000, max: 30 }),\r\n    twoFactorAuth.status()\r\n  )\r\n  /* Enable 2FA for the current User */\r\n  app.post('/rest/2fa/setup',\r\n    new RateLimit({ windowMs: 5 * 60 * 1000, max: 100 }),\r\n    security.isAuthorized(),\r\n    twoFactorAuth.setup()\r\n  )\r\n  /* Disable 2FA Status for the current User */\r\n  app.post('/rest/2fa/disable',\r\n    new RateLimit({ windowMs: 5 * 60 * 1000, max: 100 }),\r\n    security.isAuthorized(),\r\n    twoFactorAuth.disable()\r\n  )\r\n  /* Verifying DB related challenges can be postponed until the next request for challenges is coming via finale */\r\n  app.use(verify.databaseRelatedChallenges())\r\n\r\n  // vuln-code-snippet start registerAdminChallenge\r\n  /* Generated API endpoints */\r\n  finale.initialize({ app, sequelize })\r\n\r\n  const autoModels = [\r\n    { name: 'User', exclude: ['password', 'totpSecret'], model: UserModel },\r\n    { name: 'Product', exclude: [], model: ProductModel },\r\n    { name: 'Feedback', exclude: [], model: FeedbackModel },\r\n    { name: 'BasketItem', exclude: [], model: BasketItemModel },\r\n    { name: 'Challenge', exclude: [], model: ChallengeModel },\r\n    { name: 'Complaint', exclude: [], model: ComplaintModel },\r\n    { name: 'Recycle', exclude: [], model: RecycleModel },\r\n    { name: 'SecurityQuestion', exclude: [], model: SecurityQuestionModel },\r\n    { name: 'SecurityAnswer', exclude: [], model: SecurityAnswerModel },\r\n    { name: 'Address', exclude: [], model: AddressModel },\r\n    { name: 'PrivacyRequest', exclude: [], model: PrivacyRequestModel },\r\n    { name: 'Card', exclude: [], model: CardModel },\r\n    { name: 'Quantity', exclude: [], model: QuantityModel }\r\n  ]\r\n\r\n  for (const { name, exclude, model } of autoModels) {\r\n    const resource = finale.resource({\r\n      model,\r\n      endpoints: [`/api/${name}s`, `/api/${name}s/:id`],\r\n      excludeAttributes: exclude\r\n    })\r\n\r\n    // create a wallet when a new user is registered using API\r\n    if (name === 'User') { // vuln-code-snippet neutral-line registerAdminChallenge\r\n      resource.create.send.before((req: Request, res: Response, context: { instance: { id: any }, continue: any }) => { // vuln-code-snippet vuln-line registerAdminChallenge\r\n        WalletModel.create({ UserId: context.instance.id }).catch((err: unknown) => {\r\n          console.log(err)\r\n        })\r\n        return context.continue // vuln-code-snippet neutral-line registerAdminChallenge\r\n      }) // vuln-code-snippet neutral-line registerAdminChallenge\r\n    } // vuln-code-snippet neutral-line registerAdminChallenge\r\n    // vuln-code-snippet end registerAdminChallenge\r\n\r\n    // translate challenge descriptions and hints on-the-fly\r\n    if (name === 'Challenge') {\r\n      resource.list.fetch.after((req: Request, res: Response, context: { instance: string | any[], continue: any }) => {\r\n        for (let i = 0; i < context.instance.length; i++) {\r\n          let description = context.instance[i].description\r\n          if (utils.contains(description, '<em>(This challenge is <strong>')) {\r\n            const warning = description.substring(description.indexOf(' <em>(This challenge is <strong>'))\r\n            description = description.substring(0, description.indexOf(' <em>(This challenge is <strong>'))\r\n            context.instance[i].description = req.__(description) + req.__(warning)\r\n          } else {\r\n            context.instance[i].description = req.__(description)\r\n          }\r\n          if (context.instance[i].hint) {\r\n            context.instance[i].hint = req.__(context.instance[i].hint)\r\n          }\r\n        }\r\n        return context.continue\r\n      })\r\n      resource.read.send.before((req: Request, res: Response, context: { instance: { description: string, hint: string }, continue: any }) => {\r\n        context.instance.description = req.__(context.instance.description)\r\n        if (context.instance.hint) {\r\n          context.instance.hint = req.__(context.instance.hint)\r\n        }\r\n        return context.continue\r\n      })\r\n    }\r\n\r\n    // translate security questions on-the-fly\r\n    if (name === 'SecurityQuestion') {\r\n      resource.list.fetch.after((req: Request, res: Response, context: { instance: string | any[], continue: any }) => {\r\n        for (let i = 0; i < context.instance.length; i++) {\r\n          context.instance[i].question = req.__(context.instance[i].question)\r\n        }\r\n        return context.continue\r\n      })\r\n      resource.read.send.before((req: Request, res: Response, context: { instance: { question: string }, continue: any }) => {\r\n        context.instance.question = req.__(context.instance.question)\r\n        return context.continue\r\n      })\r\n    }\r\n\r\n    // translate product names and descriptions on-the-fly\r\n    if (name === 'Product') {\r\n      resource.list.fetch.after((req: Request, res: Response, context: { instance: any[], continue: any }) => {\r\n        for (let i = 0; i < context.instance.length; i++) {\r\n          context.instance[i].name = req.__(context.instance[i].name)\r\n          context.instance[i].description = req.__(context.instance[i].description)\r\n        }\r\n        return context.continue\r\n      })\r\n      resource.read.send.before((req: Request, res: Response, context: { instance: { name: string, description: string }, continue: any }) => {\r\n        context.instance.name = req.__(context.instance.name)\r\n        context.instance.description = req.__(context.instance.description)\r\n        return context.continue\r\n      })\r\n    }\r\n\r\n    // fix the api difference between finale (fka epilogue) and previously used sequlize-restful\r\n    resource.all.send.before((req: Request, res: Response, context: { instance: { status: string, data: any }, continue: any }) => {\r\n      context.instance = {\r\n        status: 'success',\r\n        data: context.instance\r\n      }\r\n      return context.continue\r\n    })\r\n  }\r\n\r\n  /* Custom Restful API */\r\n  app.post('/rest/user/login',\r\n    new RateLimit({ windowMs: 3 * 60 * 1000, max: 10 }),\r\n    login()\r\n  )\r\n  app.get('/rest/user/change-password',\r\n    new RateLimit({ windowMs: 3 * 60 * 1000, max: 5 }),\r\n    changePassword()\r\n  )\r\n  app.post('/rest/user/reset-password',\r\n    new RateLimit({ windowMs: 3 * 60 * 1000, max: 5 }),\r\n    resetPassword()\r\n  )\r\n  app.get('/rest/user/security-question',\r\n    new RateLimit({ windowMs: 3 * 60 * 1000, max: 15 }),\r\n    securityQuestion()\r\n  )\r\n  app.get('/rest/user/whoami',\r\n    new RateLimit({ windowMs: 3 * 60 * 1000, max: 30 }),\r\n    security.updateAuthenticatedUsers(),\r\n    currentUser()\r\n  )\r\n  app.get('/rest/user/authentication-details', authenticatedUsers())\r\n  app.get('/rest/products/search', search())\r\n  app.get('/rest/basket/:id', basket())\r\n  app.post('/rest/basket/:id/checkout', order())\r\n  app.put('/rest/basket/:id/coupon/:coupon', coupon())\r\n  app.get('/rest/admin/application-version', appVersion())\r\n  app.get('/rest/admin/application-configuration', appConfiguration())\r\n  app.get('/rest/repeat-notification', repeatNotification())\r\n  app.get('/rest/continue-code', continueCode.continueCode())\r\n  app.get('/rest/continue-code-findIt', continueCode.continueCodeFindIt())\r\n  app.get('/rest/continue-code-fixIt', continueCode.continueCodeFixIt())\r\n  app.put('/rest/continue-code-findIt/apply/:continueCode', restoreProgress.restoreProgressFindIt())\r\n  app.put('/rest/continue-code-fixIt/apply/:continueCode', restoreProgress.restoreProgressFixIt())\r\n  app.put('/rest/continue-code/apply/:continueCode', restoreProgress.restoreProgress())\r\n  app.get('/rest/admin/application-version', appVersion())\r\n  app.get('/rest/captcha', captcha())\r\n  app.get('/rest/image-captcha', imageCaptcha())\r\n  app.get('/rest/track-order/:id', trackOrder())\r\n  app.get('/rest/country-mapping', countryMapping())\r\n  app.get('/rest/saveLoginIp', saveLoginIp())\r\n  app.post('/rest/user/data-export', security.appendUserId(), imageCaptcha.verifyCaptcha())\r\n  app.post('/rest/user/data-export', security.appendUserId(), dataExport())\r\n  app.get('/rest/languages', languageList())\r\n  app.get('/rest/order-history', orderHistory.orderHistory())\r\n  app.get('/rest/order-history/orders', security.isAccounting(), orderHistory.allOrders())\r\n  app.put('/rest/order-history/:id/delivery-status', security.isAccounting(), orderHistory.toggleDeliveryStatus())\r\n  app.get('/rest/wallet/balance', security.appendUserId(), wallet.getWalletBalance())\r\n  app.put('/rest/wallet/balance', security.appendUserId(), wallet.addWalletBalance())\r\n  app.get('/rest/deluxe-membership', deluxe.deluxeMembershipStatus())\r\n  app.post('/rest/deluxe-membership', security.appendUserId(), deluxe.upgradeToDeluxe())\r\n  app.get('/rest/memories', memory.getMemories())\r\n  app.get('/rest/chatbot/status', chatbot.status())\r\n  app.post('/rest/chatbot/respond', chatbot.process())\r\n  /* NoSQL API endpoints */\r\n  app.get('/rest/products/:id/reviews', showProductReviews())\r\n  app.put('/rest/products/:id/reviews', createProductReviews())\r\n  app.patch('/rest/products/reviews', security.isAuthorized(), updateProductReviews())\r\n  app.post('/rest/products/reviews', security.isAuthorized(), likeProductReviews())\r\n\r\n  /* B2B Order API */\r\n  app.post('/b2b/v2/orders', b2bOrder())\r\n\r\n  /* File Serving */\r\n  app.get('/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg', easterEgg())\r\n  app.get('/this/page/is/hidden/behind/an/incredibly/high/paywall/that/could/only/be/unlocked/by/sending/1btc/to/us', premiumReward())\r\n  app.get('/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility', privacyPolicyProof())\r\n\r\n  /* Route for dataerasure page */\r\n  app.use('/dataerasure', dataErasure)\r\n\r\n  /* Route for redirects */\r\n  app.get('/redirect', redirect())\r\n\r\n  /* Routes for promotion video page */\r\n  app.get('/promotion', videoHandler.promotionVideo())\r\n  app.get('/video', videoHandler.getVideo())\r\n\r\n  /* Routes for profile page */\r\n  app.get('/profile', security.updateAuthenticatedUsers(), userProfile())\r\n  app.post('/profile', updateUserProfile())\r\n\r\n  /* Route for vulnerable code snippets */\r\n  app.get('/snippets', vulnCodeSnippet.serveChallengesWithCodeSnippet())\r\n  app.get('/snippets/:challenge', vulnCodeSnippet.serveCodeSnippet())\r\n  app.post('/snippets/verdict', vulnCodeSnippet.checkVulnLines())\r\n  app.get('/snippets/fixes/:key', vulnCodeFixes.serveCodeFixes())\r\n  app.post('/snippets/fixes', vulnCodeFixes.checkCorrectFix())\r\n\r\n  app.use(angular())\r\n\r\n  /* Error Handling */\r\n  app.use(verify.errorHandlingChallenge())\r\n  app.use(errorhandler())\r\n}).catch((err) => {\r\n  console.error(err)\r\n})\r\n\r\nconst multer = require('multer')\r\nconst uploadToMemory = multer({ storage: multer.memoryStorage(), limits: { fileSize: 200000 } })\r\nconst mimeTypeMap: any = {\r\n  'image/png': 'png',\r\n  'image/jpeg': 'jpg',\r\n  'image/jpg': 'jpg'\r\n}\r\nconst uploadToDisk = multer({\r\n  storage: multer.diskStorage({\r\n    destination: (req: Request, file: any, cb: Function) => {\r\n      const isValid = mimeTypeMap[file.mimetype]\r\n      let error: Error | null = new Error('Invalid mime type')\r\n      if (isValid) {\r\n        error = null\r\n      }\r\n      cb(error, path.resolve('frontend/dist/frontend/assets/public/images/uploads/'))\r\n    },\r\n    filename: (req: Request, file: any, cb: Function) => {\r\n      const name = security.sanitizeFilename(file.originalname)\r\n        .toLowerCase()\r\n        .split(' ')\r\n        .join('-')\r\n      const ext = mimeTypeMap[file.mimetype]\r\n      cb(null, name + '-' + Date.now() + '.' + ext)\r\n    }\r\n  })\r\n})\r\n\r\nconst expectedModels = ['Address', 'Basket', 'BasketItem', 'Captcha', 'Card', 'Challenge', 'Complaint', 'Delivery', 'Feedback', 'ImageCaptcha', 'Memory', 'PrivacyRequestModel', 'Product', 'Quantity', 'Recycle', 'SecurityAnswer', 'SecurityQuestion', 'User', 'Wallet']\r\nwhile (!expectedModels.every(model => Object.keys(sequelize.models).includes(model))) {\r\n  logger.info(`Entity models ${colors.bold(Object.keys(sequelize.models).length)} of ${colors.bold(expectedModels.length)} are initialized (${colors.yellow('WAITING')})`)\r\n}\r\nlogger.info(`Entity models ${colors.bold(Object.keys(sequelize.models).length)} of ${colors.bold(expectedModels.length)} are initialized (${colors.green('OK')})`)\r\n\r\n// vuln-code-snippet start exposedMetricsChallenge\r\n/* Serve metrics */\r\nconst Metrics = metrics.observeMetrics() // vuln-code-snippet neutral-line exposedMetricsChallenge\r\nconst metricsUpdateLoop = Metrics.updateLoop // vuln-code-snippet neutral-line exposedMetricsChallenge\r\napp.get('/metrics', metrics.serveMetrics()) // vuln-code-snippet vuln-line exposedMetricsChallenge\r\nerrorhandler.title = `${config.get('application.name')} (Express ${utils.version('express')})`\r\n\r\nconst registerWebsocketEvents = require('./lib/startup/registerWebsocketEvents')\r\nconst customizeApplication = require('./lib/startup/customizeApplication')\r\nconst customizeEasterEgg = require('./lib/startup/customizeEasterEgg') // vuln-code-snippet hide-line\r\n\r\nexport async function start (readyCallback: Function) {\r\n  const datacreatorEnd = startupGauge.startTimer({ task: 'datacreator' })\r\n  await sequelize.sync({ force: true })\r\n  await datacreator()\r\n  datacreatorEnd()\r\n  const port = process.env.PORT ?? config.get('server.port')\r\n  process.env.BASE_PATH = process.env.BASE_PATH ?? config.get('server.basePath')\r\n\r\n  server.listen(port, () => {\r\n    logger.info(colors.cyan(`Server listening on port ${colors.bold(port)}`))\r\n    startupGauge.set({ task: 'ready' }, (Date.now() - startTime) / 1000)\r\n    if (process.env.BASE_PATH !== '') {\r\n      logger.info(colors.cyan(`Server using proxy base path ${colors.bold(process.env.BASE_PATH)} for redirects`))\r\n    }\r\n    registerWebsocketEvents(server)\r\n    if (readyCallback) {\r\n      readyCallback()\r\n    }\r\n  })\r\n\r\n  void collectDurationPromise('customizeApplication', customizeApplication)() // vuln-code-snippet hide-line\r\n  void collectDurationPromise('customizeEasterEgg', customizeEasterEgg)() // vuln-code-snippet hide-line\r\n}\r\n\r\nexport function close (exitCode: number | undefined) {\r\n  if (server) {\r\n    clearInterval(metricsUpdateLoop)\r\n    server.close()\r\n  }\r\n  if (exitCode !== undefined) {\r\n    process.exit(exitCode)\r\n  }\r\n}\r\n// vuln-code-snippet end exposedMetricsChallenge\r\n\r\n// stop server on sigint or sigterm signals\r\nprocess.on('SIGINT', () => close(0))\r\nprocess.on('SIGTERM', () => close(0))\r\n",
    "usedDeprecatedRules": []
  }
]
